#!/bin/sh

. $SNAP/bin/default_config

hostname=`hostname`
root_option_file="$SNAP_DATA/mysql/root.ini"
roundcube_option_file="$SNAP_DATA/mysql/roundcube.ini"
iredadmin_option_file="$SNAP_DATA/mysql/iredadmin.ini"
vmailadmin_option_file="$SNAP_DATA/mysql/vmailadmin.ini"
roundcube_password_file="$SNAP_DATA/mysql/roundcube_password"
iredadmin_password_file="$SNAP_DATA/mysql/iredadmin_password"
vmailadmin_password_file="$SNAP_DATA/mysql/vmailadmin_password"
mysqld_pid_file_path=$SNAP_DATA/mysql/${hostname}.pid
mysql_socket_file_path="/var/snap/$SNAP_NAME/current/mysql/mysql.sock"
new_install=false
roundcube_init_mysql=`cat $SNAP/conf/roundcube/mysql.initial.sql`
iredadmin_init_mysql=`cat $SNAP/conf/iredadmin/iredadmin.initial.sql`
storage_base_dir=${SNAP_DATA}/var/vmail
storage_node=vmail1
date="$(/bin/date +%Y.%m.%d.%H.%M.%S)"

#sed in-place option is not available on some distros.
modify() {
    sed -u "$1" "$2" > "$2".bak && mv "$2".bak "$2"
}

create_user() {
    storage_mailbox_dir=$storage_base_dir/$storage_node
    user_maildir_part="$1/$2-$date"
    user_maildir_full_path="${storage_mailbox_dir}/$user_maildir_part"
    user_maildir_inbox="${user_maildir_full_path}/Maildir/new"
    test -d $user_maildir_inbox || mkdir -p $user_maildir_inbox
    echo "$user_maildir_part"
}

vmailadmin_sql_setup() {
    vmailadmin_mysql_file=$SNAP_DATA/vmailadmin.initial.sql
    cp $SNAP/conf/mysql/vmailadmin.initial.sql $vmailadmin_mysql_file
    modify "s#.*storagebasedirectory.*#    storagebasedirectory VARCHAR(255) NOT NULL DEFAULT '${storage_base_dir}',#g" $vmailadmin_mysql_file
    modify "s#.*storagenode.*#    storagenode VARCHAR(255) NOT NULL DEFAULT '${storage_node}',#g" $vmailadmin_mysql_file
    vmailadmin_init_mysql=`cat $vmailadmin_mysql_file`
    rm $vmailadmin_mysql_file
    echo "$vmailadmin_init_mysql"
}

# Make sure the database is initialized (this is safe to run if already initialized)
mysqld --initialize-insecure --basedir="$SNAP" --datadir="$SNAP_DATA/mysql" --lc-messages-dir="$SNAP/share"

# If the above command succeeded, it means this is a new installation.
if [ $? -eq 0 ]; then
	new_install=true
fi

# Start mysql
$SNAP/support-files/mysql.server start

# Initialize new installation if necessary.
if [ $new_install = true ]; then
	# Generate a password for the root mysql user.
	echo -n "Generating root mysql password... "
	root_password=$(cat /dev/urandom | tr -dc _A-Z-a-z-0-9 | head -c64)
	echo "done."

	# Generate a password for the roundcube mysql user.
	echo -n "Generating roundcube mysql password... "
	roundcube_password=$(cat /dev/urandom | tr -dc _A-Z-a-z-0-9 | head -c64)
	echo "done."

	# Generate a password for the vmailadmin mysql user.
	echo -n "Generating vmailadmin mysql password... "
	vmailadmin_password=$(cat /dev/urandom | tr -dc _A-Z-a-z-0-9 | head -c64)
	echo "done."

	# Generate a password for the iredadmin mysql user.
	echo -n "Generating iredadmin mysql password... "
	iredadmin_password=$(cat /dev/urandom | tr -dc _A-Z-a-z-0-9 | head -c64)
	echo "done."

	# Save root user information
	echo "[client]" >> $root_option_file
	echo "socket=$mysql_socket_file_path" >> $root_option_file
	echo "user=root" >> $root_option_file
	chmod 600 $root_option_file

	# Save roundcube user information
	echo "[client]" >> $roundcube_option_file
	echo "socket=$mysql_socket_file_path" >> $roundcube_option_file
	echo "user=roundcube" >> $roundcube_option_file
	chmod 600 $roundcube_option_file

	# Save vmailadmin user information
	echo "[client]" >> $vmailadmin_option_file
	echo "socket=$mysql_socket_file_path" >> $vmailadmin_option_file
	echo "user=vmailadmin" >> $vmailadmin_option_file
	chmod 600 $vmailadmin_option_file

	# Save iredadmin user information
	echo "[client]" >> $iredadmin_option_file
	echo "socket=$mysql_socket_file_path" >> $iredadmin_option_file
	echo "user=iredadmin" >> $iredadmin_option_file
	chmod 600 $iredadmin_option_file

	# Now set everything up in one step:
	# 1) Set the root user's password
        # 2) Roundcube setup
	     #. Create roundcube user.
	     #. Create roundcubemail database
	     #. Grant the roundcube user privileges on the roundcubemail database
        # 3) iredAdmin setup
             #. Create iredadmin user
             #. Create iredadmin database
	     #. Grant iredadmin user privileges on the iredadmin database
        # 4) vmailAdmin setup
             #. Create vmailadmin user
             #. Create vmailadmin database
	     #. Grant vmailadmin user privileges on the vmailadmin database
	echo -n "Setting up users and a bunch of database for roundcube, iredadmin, vmailadmin and testing server ... "
	mysql --defaults-file=$root_option_file <<SQL
ALTER USER 'root'@'localhost' IDENTIFIED BY '$root_password';
CREATE DATABASE roundcubemail /*!40101 CHARACTER SET utf8 COLLATE utf8_general_ci */;
CREATE USER 'roundcube'@'localhost' IDENTIFIED BY '$roundcube_password';
GRANT ALL PRIVILEGES ON roundcubemail.* TO 'roundcube'@'localhost' IDENTIFIED BY '$roundcube_password';
CREATE DATABASE iredadmin DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE USER 'iredadmin'@'localhost' IDENTIFIED BY '$iredadmin_password';
GRANT ALL PRIVILEGES ON iredadmin.* TO 'iredadmin'@'localhost' IDENTIFIED BY '$iredadmin_password' WITH GRANT OPTION;
CREATE DATABASE IF NOT EXISTS vmailadmin CHARACTER SET utf8;
CREATE USER 'vmailadmin'@'localhost' IDENTIFIED BY '$vmailadmin_password';
GRANT ALL PRIVILEGES ON vmailadmin.* TO 'vmailadmin'@'localhost' IDENTIFIED BY '$vmailadmin_password' WITH GRANT OPTION;
FLUSH PRIVILEGES;
SQL
	if [ $? -eq 0 ]; then
		echo "User and database creation: done."
	else
		echo "Failed to initialize users and db reverting..."
		$SNAP/support-files/mysql.server stop
		rm -rf $SNAP_DATA/mysql/*
	fi

	# Now the root and roundcube mysql user has a password. Save that as well.
	echo "password=$root_password" >> $root_option_file
	echo "password=$roundcube_password" >> $roundcube_option_file
	echo "password=$iredadmin_password" >> $iredadmin_option_file
	echo "password=$vmailadmin_password" >> $vmailadmin_option_file

	mysql --defaults-file=$roundcube_option_file <<SQL
$roundcube_init_mysql
SQL

	if [ $? -eq 0 ]; then
		echo "Roundcube initialize db: done."
	else
		echo "Failed to initialize roundcube and testing data-- reverting..."
		$SNAP/support-files/mysql.server stop
		rm -rf $SNAP_DATA/mysql/*
	fi

	mysql --defaults-file=$iredadmin_option_file <<SQL
$iredadmin_init_mysql
SQL
	if [ $? -eq 0 ]; then
		echo "Iredadmin initialize db: done."
	else
		echo "Failed to initialize Iredadmin and testing data-- reverting..."
		$SNAP/support-files/mysql.server stop
		rm -rf $SNAP_DATA/mysql/*
	fi

domain_admin_name=${DEFAULT_ADMIN_NAME}
domain_admin_pass=$(python ${SNAP}/bin/generate_ssha_password.py ${DEFAULT_ADMIN_PASSWORD})
default_user=${DEFAULT_ADMIN_NAME}
default_domain=${DEFAULT_HOST_NAME}
default_hash_part=$(create_user $default_domain $default_user)
vmailadmin_init_mysql="$(vmailadmin_sql_setup)
INSERT INTO domain (domain,transport,settings,created) VALUES ('${default_domain}', 'dovecot', 'default_user_quota:1024;', NOW());
INSERT INTO mailbox (username,password,name,maildir,quota,domain,isadmin,isglobaladmin,created) VALUES ('${default_user}@${default_domain}', '${domain_admin_pass}','${default_user}','${default_has_part}',1024, '${default_domain}', 1, 1, NOW());
INSERT INTO domain_admins (username,domain,created) VALUES ('${domain_admin_name}@${default_domain}','ALL', NOW());
"
	mysql --defaults-file=$vmailadmin_option_file <<SQL
$vmailadmin_init_mysql
SQL
	if [ $? -eq 0 ]; then
		echo "Vmailadmin initialize db: done."
	else
		echo "Failed to initialize Vmailadmin and testing data-- reverting..."
		$SNAP/support-files/mysql.server stop
		rm -rf $SNAP_DATA/mysql/*
	fi
fi

# Wait here until mysql is running
echo "Waiting for server..."
while [ ! -f "$mysqld_pid_file_path" -o ! -S "$mysql_socket_file_path" ]; do
	sleep 1
done

# Check and upgrade mysql tables if necessary. This will return 0 if the upgrade
# succeeded, in which case we need to restart mysql.
echo "Checking/upgrading mysql tables if necessary..."
mysql_upgrade --defaults-file=$root_option_file
if [ $? -eq 0 ]; then
	echo "Restarting mysql server after upgrade..."
	$SNAP/support-files/mysql.server restart

	echo "Waiting for server to come back after upgrade..."
	while [ ! -f "$mysqld_pid_file_path" -o ! -S "$mysql_socket_file_path" ]; do
        	sleep 1
	done
fi

# If this was a new installation, wait until the server is all up and running
# before saving off all user's password. This way the presence of the
# file can be used as a signal that mysql is ready to be used.
if [ $new_install = true ]; then
	echo "$roundcube_password" > $roundcube_password_file
	echo "$iredadmin_password" > $iredadmin_password_file
	echo "$vmailadmin_password" > $vmailadmin_password_file
fi

# Wait here until mysql exits (turn a forking service into simple). This is
# only needed for Ubuntu Core 15.04, as 16.04 supports forking services.
mysqld_pid=$(cat "$mysqld_pid_file_path")
while kill -0 $mysqld_pid 2>/dev/null; do
	sleep 1
done
